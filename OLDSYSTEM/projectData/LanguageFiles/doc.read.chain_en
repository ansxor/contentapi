Chaining Documentation
----------------------

Chaining allows you to make multiple standard API GET requests in a single request.
It also allows you to link requests together to reduce work. For instance, you may
request a list of content, then request the create and edit users for all of said
content. You can do that in one request with the chain endpoint.


* An example:

  /api/read/chain?requests=content&request=user.0createUserId.0editUserId

This is two separate requests chained into one. This will pull all content first, 
then pull users where their ids are in the content's set of createUserId and 
editUserId. The .0 on user indicates the request index and field to pull from.
In the user case, we want users for the ids found in the content request's 
createUserId and editUserId fields (content was first request, index 0).

There can be as many or as few links within a chain as you want, however there is
a maximum of 5 requests in a chain.


* Another example:

  /api/Read/chain?requests=activity&requests=user.0userId&requests=content.0contentId

This requests as much activity as possible, then links in users to the activity 
userId field, and links content into the activity contentId field. This is three
requests, but the last two are linked to just the first one. 


You can add the standard endpoint search parameters as URL encoded json after the
request, separated by -. Example:

  /api/Read/chain?requests=activity-%7B%22createStart%22%3A%222020-05-01%22%7D&requests=user.0userId&requests=content.0contentId

This is the same request as above, but the activity is constrained by createStart.
ANY request in the chain can have search filters. Chaining does NOT need to 
necessarily link: all requests can be individual with no actual chaining.


* Field limiting

Unlike the standard GET endpoints, you can limit the fields returned in chaining.
Say you want to perform the first example request (content with linked users) but
you only want the user's id and username. That would be:

  /api/read/chain?requests=content&requests=user.0createUserId.0editUserId&user=id,username

Just add a query parameter with the endpoint name = a comma separated list of 
field names. You can limit any or all or none of the endpoint results.


* Specify Search Field

So far, all these chains have linked some field from one request into the ID search
for some other set. You can specify the search field to, for instance, search for
parent ids. An example would be getting all content which are direct children of
users (such as user pages?):

 /api/read/chain?requests=user&requests=content.0id$parentids

It's the same as before with .IDsomefield, but we add $searchfield to specify
the field to search against. This defaults to "ids" when $ is not given.


* Chain field path

You can also go deep into objects using '_', and can chain against string fields 
IF they appear to be a list of ids. For instance, categories have a "values" 
dictionary, and you may have a list of pinned content. You could do:

 /api/read/chain?requests=category&requests=content.0values_pinned

where values_pinned means "chain against values[pinned]".