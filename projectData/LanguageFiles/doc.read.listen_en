Listen Documentation
--------------------

/api/read/listen is a long-polling endpoint that allows retrieval of SOME real-time 
information, such as comments and activity. You "listen" for things by giving a
query param for each thing you want to listen to. You can listen for multiple 
things at once; I hope that one long-polling request will suffice all your needs.

The general idea for long-polling is to keep track of the last ID returned by 
this endpoint (for whatever context/listener you're using) and send it back 
with every request. For the initial request, it is assumed you would have 
pulled the ID along with pertinent data from the standard chaining endpoint. 


-- The "actions" listener --

Actions listening is heavily dependent on chaining. You will essentially 
"listen" for ALL changes on the website, and chain comments or activity or 
whatever onto this stream. So, this listening endpoint is essentially chaining 
but with polling. This endpoint can be used for realtime comments, activity,
and notifications (for instance: watches)

To listen for "actions", you would visit:

/api/read/listen?actions=(a json string) 

where the json string is (query encoded):

{
    "lastId" : num,
    "statuses" : {"contentId" : "status", "otherContentId" : "status" },
    "chains" : ["comment.0id", "etc" ]
}

NOTE: IF YOUR LONG POLLER ISN'T EVER COMPLETING, MAKE SURE IT'S "CHAINS" 
AND NOT "CHAIN"

The endpoint will "complete" when data is able to be chained. Regardless of 
how many "general" actions are going on across the website, it will NOT 
complete until you're able to chain something. It will listen for
all comments and all activity with id higher than lastId (or wait for anything
new if lastId is not given or == 0), and return those ids to the chains. The
chains are exactly the same as the chaining endpoint, chain 0 are the actions
you're listening for. The actions are a simple list of ids (you are only 
given id). 

For instance, to listen for comments since 500, you might do:

/api/read/listen?actions=%7B%22lastId%22%20%3A%200%2C%20%22chains%22%20%3A%20%5B%20%22comment.0id%22%20%5D%7D

Where the ugly query parameter is the encoded json: {"lastId":500,"chains":["comment.0id"]}

You could chain to multiple things to receive multiple things from the actions
listening endpoint. For instance, you could chain comments AND activity/etc.

Note: there are special circumstances where you will receive apparently 
"chained" data without asking for it. One such instance is deleted comments:
because comment deletions do not generate activity, you will receive a
fake "commentdelete" item in your chain for ANY comment deleted on the website, 
even if you're not chaining for those. You can safely ignore those if you wish,
however you should probably remove any matching comments you're displaying 
for any ID you receive through that.


-- The "listeners" listener --

When requesting from the actions endpoint, you can specify the "statuses" you
want to show up as in various contents. They don't have to line up with what
you're chaining. This allows you to "appear" to be active in a set of rooms
while still receiving data from many more. This endpoint gives you everyone's
reported statuses. The statuses are arbitrary strings. Like the actions
endpoint, you are expected to send the "last" data you retrieved in order
for the long polling to work.

To listen for "listeners" (people in rooms) you would visit:

/api/read/listen?listeners=(a json string)

where the json string is (query encoded):

{
    "lastListeners" : { "contentId" : { "user" : "status", "user2": "status" }, "contentId" : {etc.} },
    "chains" : [ "user.0listeners", "etc" ]
}

The endpoint will return, when DIFFERENT from the lastListeners given, 
the list of user ids and their statuses for users in the given parents
(content IDs). You MUST pass all the contentIds you want to listen for,
passing an empty lastListeners will result in an error. You can only see
listeners in content you have read access on. 

If you wish to simply know who is in each room, you could pass, for 
instance, { "0" : "" } as the user status list for each content, since 
user 0 will never be in any room and thus even empty lists will return 
instantly. As stated before, you should send back the userlists you got, 
so it can poll for changes to those. 

As with actions, you can chain with listeners. The userID field to chain
to is "listeners", so you might do a chain like "user.0listeners".



You can of course combine any combination of listeners. Any listener parameter
given activates that listener, and the first one to complete will return its 
data. For instance, if you listen for both listeners and actions, you may 
receive the actions without listeners or a list of listeners without action
data, whichever completes first.
